{"version":3,"sources":["App.js","index.js"],"names":["App","useState","list","months","search","state","setState","useEffect","fetch","method","then","res","json","item","formatter","Intl","NumberFormat","style","currency","minimumFractionDigits","setList","map","toRp","format","amount","replace","dd","Date","completed_at","readYear","getFullYear","readDate","getDate","readMonth","getMonth","date","month","year","className","icon","faSearch","type","placeholder","value","onChange","e","itemList","document","querySelectorAll","i","length","dataset","name","toUpperCase","indexOf","target","display","key","id","data-name","beneficiary_name","sender_bank","faArrowRight","beneficiary_bank","ReactDOM","render","getElementById"],"mappings":"4xBA0HeA,MAnHf,WAAgB,IAAD,EACaC,mBAAS,CACjCC,KAAM,GACNC,OAAQ,CACN,UACA,WACA,QACA,QACA,MACA,OACA,OACA,UACA,YACA,UACA,WACA,YAEFC,OAAQ,KAjBG,mBACNC,EADM,KACCC,EADD,KAsEb,OAlDAC,qBAAU,WACRC,MAAM,mDAAoD,CACxDC,OAAQ,QAEPC,MAAK,SAAAC,GACJ,OAAOA,EAAIC,UAEZF,MAAK,SAAAG,GACJ,IAAMC,EAAY,IAAIC,KAAKC,aAAa,QAAS,CAC/CC,MAAO,WACPC,SAAU,MACVC,sBAAuB,IAGnBC,EAAUP,EAAKQ,KAAI,SAAAnB,GACvB,IAAMoB,EAAOR,EAAUS,OAAOrB,EAAKsB,QAAQC,QAAQ,MAAO,MACpDC,EAAK,IAAIC,KAAKzB,EAAK0B,cACnBC,EAAWH,EAAGI,cACdC,EAAWL,EAAGM,UACdC,EAAYP,EAAGQ,WAErB,OAAO,EAAP,GACKhC,EADL,CAEEsB,OAAQF,EAAKG,QAAQ,MAAO,KAC5BU,KAAMJ,EACNK,MAAOH,EACPI,KAAMR,OAIVvB,EAAS,EAAD,GAAMD,EAAN,CAAaH,KAAMkB,UAE9B,IAmBD,yBAAKkB,UAAU,OACb,yBAAKA,UAAU,iBACb,kBAAC,IAAD,CAAiBA,UAAU,SAASC,KAAMC,MAC1C,2BACEC,KAAK,OACLC,YAAY,YACZC,MAAOtC,EAAMD,OACbwC,SAxBe,SAAAC,GAErB,IADA,IAAMC,EAAWC,SAASC,iBAAiB,gBAClCC,EAAI,EAAGA,EAAIH,EAASI,OAAQD,IAEjCH,EAASG,GAAGE,QAAQC,KACjBC,cACAC,QAAQT,EAAEU,OAAOZ,MAAMU,gBAAkB,EAE5CP,EAASG,GAAGhC,MAAMuC,QAAU,GAE5BV,EAASG,GAAGhC,MAAMuC,QAAU,OAGhClD,EAAS,EAAD,GAAMD,EAAN,CAAaD,OAAQyC,EAAEU,OAAOZ,aAenCtC,EAAMH,KAAKmB,KAAI,SAAAR,GACd,OACE,yBACE4C,IAAK5C,EAAK6C,GACVpB,UAAU,cACVqB,YAAW9C,EAAK+C,kBAEhB,yBAAKtB,UAAU,eACf,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,gBACb,4BACGzB,EAAKgD,YAAYR,cAClB,8BACG,IACD,kBAAC,IAAD,CAAiBd,KAAMuB,OAExBjD,EAAKkD,iBAAiBV,eAEzB,2BAAIxC,EAAK+C,kBACT,2BACG/C,EAAKW,OADR,UACwB,IADxB,UAEMX,EAAKsB,KAFX,YAEmB9B,EAAMF,OAAOU,EAAKuB,OAFrC,aAEgDvB,EAAKwB,QAGvD,4BAAQC,UAAU,cAAlB,mBC5Gd0B,IAASC,OAAO,kBAAC,EAAD,MAASlB,SAASmB,eAAe,W","file":"static/js/main.b9961ecb.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSearch, faArrowRight } from '@fortawesome/free-solid-svg-icons';\n\nimport './App.css';\n\nfunction App() {\n  const [state, setState] = useState({\n    list: [],\n    months: [\n      'Januari',\n      'Februari',\n      'Maret',\n      'April',\n      'Mei',\n      'Juni',\n      'Juli',\n      'Agustus',\n      'September',\n      'Oktober',\n      'November',\n      'December'\n    ],\n    search: ''\n  });\n\n  useEffect(() => {\n    fetch('https://armanrozika.github.io/page/comments.json', {\n      method: 'GET'\n    })\n      .then(res => {\n        return res.json();\n      })\n      .then(item => {\n        const formatter = new Intl.NumberFormat('en-ID', {\n          style: 'currency',\n          currency: 'IDR',\n          minimumFractionDigits: 0\n        });\n\n        const setList = item.map(list => {\n          const toRp = formatter.format(list.amount).replace('IDR', 'Rp');\n          const dd = new Date(list.completed_at);\n          const readYear = dd.getFullYear();\n          const readDate = dd.getDate();\n          const readMonth = dd.getMonth();\n\n          return {\n            ...list,\n            amount: toRp.replace(/,/gi, '.'),\n            date: readDate,\n            month: readMonth,\n            year: readYear\n          };\n        });\n\n        setState({ ...state, list: setList });\n      });\n  }, []);\n\n  const handleonChange = e => {\n    const itemList = document.querySelectorAll('.client-list');\n    for (let i = 0; i < itemList.length; i++) {\n      if (\n        itemList[i].dataset.name\n          .toUpperCase()\n          .indexOf(e.target.value.toUpperCase()) > -1\n      ) {\n        itemList[i].style.display = '';\n      } else {\n        itemList[i].style.display = 'none';\n      }\n    }\n    setState({ ...state, search: e.target.value });\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"input-wrapper\">\n        <FontAwesomeIcon className=\"faicon\" icon={faSearch} />\n        <input\n          type=\"text\"\n          placeholder=\"Cari nama\"\n          value={state.search}\n          onChange={handleonChange}\n        />\n      </div>\n\n      {state.list.map(item => {\n        return (\n          <div\n            key={item.id}\n            className=\"client-list\"\n            data-name={item.beneficiary_name}\n          >\n            <div className=\"green-line\"></div>\n            <div className=\"list-content\">\n              <div className=\"content-left\">\n                <h3>\n                  {item.sender_bank.toUpperCase()}\n                  <span>\n                    {' '}\n                    <FontAwesomeIcon icon={faArrowRight} />\n                  </span>\n                  {item.beneficiary_bank.toUpperCase()}\n                </h3>\n                <p>{item.beneficiary_name}</p>\n                <p>\n                  {item.amount} &#9679;{' '}\n                  {`${item.date} ${state.months[item.month]}  ${item.year}`}\n                </p>\n              </div>\n              <button className=\"btn-status\">Berhasil</button>\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}